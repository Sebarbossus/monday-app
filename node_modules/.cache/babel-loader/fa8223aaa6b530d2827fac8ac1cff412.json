{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nicolas Alvarez\\\\Desktop\\\\monday-teslax\\\\src\\\\App.js\";\nimport React from \"react\";\nimport mondaySdk from \"monday-sdk-js\";\nimport ReactWordcloud from \"react-wordcloud\";\nimport { stopWords } from \"./stop-words\";\nimport _ from \"lodash\";\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getSettings = res => {\n      this.setState({\n        settings: res.data\n      });\n      console.log(\"settings!\", res.data);\n      this.generateWords();\n    };\n\n    this.getItemIds = res => {\n      const itemIds = {};\n      res.data.forEach(id => itemIds[id] = true);\n      this.setState({\n        itemIds: itemIds\n      });\n      this.generateWords();\n    };\n\n    this.getContext = res => {\n      const context = res.data;\n      console.log(\"context!\", context);\n      this.setState({\n        context\n      });\n      const boardIds = context.boardIds || [context.boardId];\n      monday.api(`query { boards(ids:[${boardIds}]) { id, items { id, name, column_values { id, text } } }}`).then(res => {\n        this.setState({\n          boards: res.data.boards\n        }, () => {\n          console.log(res.data.boards[0].items.slice(0, 10).map(item => item.id));\n          this.generateWords();\n        });\n      });\n    };\n\n    this.generateWords = () => {\n      const words = this.getWords();\n      console.log(\"words\", words);\n      this.setState({\n        words\n      });\n    };\n\n    this.getWords = () => {\n      const text = this.getText();\n      const lines = text.split(/[,\\. ]+/g);\n      const wordsMap = {};\n      lines.forEach(word => {\n        word = word.toLowerCase().trim();\n        if (!wordsMap[word]) wordsMap[word] = 0;\n        wordsMap[word] += 1;\n      });\n      const words = [];\n      Object.keys(wordsMap).map(word => {\n        if (word && word.length > 2 && wordsMap[word] && !stopWords[word]) {\n          words.push({\n            text: word,\n            value: wordsMap[word]\n          });\n        }\n      });\n      return words;\n    };\n\n    this.getText = () => {\n      const {\n        boards,\n        settings,\n        itemIds\n      } = this.state;\n      const result = boards.map(board => {\n        return board.items.filter(item => !itemIds || itemIds[item.id]).map(item => {\n          let columnIds, values;\n          if (settings.column) columnIds = Object.keys(settings.column);\n\n          if (columnIds && columnIds.length > 0) {\n            const columnValues = item.column_values.filter(cv => {\n              return columnIds.includes(cv.id);\n            });\n            values = columnValues.map(cv => cv.text).filter(t => t && t.length > 0).join(\" \");\n            if (columnIds.includes(\"name\")) values += item.name;\n            return values;\n          } else {\n            return item.name;\n          }\n        });\n      });\n      return _.flatten(result).join(\" \");\n    };\n\n    this.maxWords = () => {\n      const {\n        settings\n      } = this.state;\n      return settings.maxWords ? parseInt(settings.maxWords) : 100;\n    };\n\n    this.padding = () => {\n      const {\n        settings\n      } = this.state;\n      return settings.padding ? parseInt(settings.padding) : 10;\n    };\n\n    this.state = {\n      settings: {},\n      context: {},\n      boards: [],\n      words: [],\n      itemIds: false\n    };\n  }\n\n  componentDidMount() {\n    monday.listen(\"settings\", this.getSettings);\n    monday.listen(\"context\", this.getContext);\n    monday.listen(\"itemIds\", this.getItemIds);\n  }\n\n  render() {\n    const {\n      settings,\n      context,\n      words\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"monday-app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ReactWordcloud, {\n      words: words,\n      maxWords: this.maxWords(),\n      options: {\n        fontFamily: \"Roboto\",\n        fontSizes: [18, 36],\n        fontWeight: 700,\n        deterministic: true,\n        colors: colors,\n        padding: this.padding() // spiral: \"archimedean\"\n\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;\nconst colors = [\"#fdab3d\", \"#00c875\", \"#e2445c\", \"#0086c0\", \"#579bfc\", \"#a25ddc\", \"#037f4c\", \"#CAB641\", \"#FFCB00\", \"#BB3354\", \"#FF158A\", \"#FF5AC4\", \"#784BD1\", \"#9CD326\", \"#66CCFF\", \"#7F5347\", \"#FF642E\"];","map":{"version":3,"sources":["C:/Users/Nicolas Alvarez/Desktop/monday-teslax/src/App.js"],"names":["React","mondaySdk","ReactWordcloud","stopWords","_","monday","App","Component","constructor","props","getSettings","res","setState","settings","data","console","log","generateWords","getItemIds","itemIds","forEach","id","getContext","context","boardIds","boardId","api","then","boards","items","slice","map","item","words","getWords","text","getText","lines","split","wordsMap","word","toLowerCase","trim","Object","keys","length","push","value","state","result","board","filter","columnIds","values","column","columnValues","column_values","cv","includes","t","join","name","flatten","maxWords","parseInt","padding","componentDidMount","listen","render","fontFamily","fontSizes","fontWeight","deterministic","colors"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport mondaySdk from \"monday-sdk-js\";\nimport ReactWordcloud from \"react-wordcloud\";\nimport { stopWords } from \"./stop-words\";\nimport _ from \"lodash\";\n\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      settings: {},\n      context: {},\n      boards: [],\n      words: [],\n      itemIds: false\n    };\n  }\n\n  componentDidMount() {\n    monday.listen(\"settings\", this.getSettings);\n    monday.listen(\"context\", this.getContext);\n    monday.listen(\"itemIds\", this.getItemIds);\n  }\n\n  getSettings = (res) => {\n    this.setState({ settings: res.data });\n    console.log(\"settings!\", res.data);\n    this.generateWords();\n  };\n\n  getItemIds = (res) => {\n    const itemIds = {};\n    res.data.forEach((id) => (itemIds[id] = true));\n    this.setState({ itemIds: itemIds });\n    this.generateWords();\n  };\n\n  getContext = (res) => {\n    const context = res.data;\n    console.log(\"context!\", context);\n    this.setState({ context });\n\n    const boardIds = context.boardIds || [context.boardId];\n    monday\n      .api(`query { boards(ids:[${boardIds}]) { id, items { id, name, column_values { id, text } } }}`)\n      .then((res) => {\n        this.setState({ boards: res.data.boards }, () => {\n          console.log(res.data.boards[0].items.slice(0, 10).map((item) => item.id));\n          this.generateWords();\n        });\n      });\n  };\n\n  generateWords = () => {\n    const words = this.getWords();\n    console.log(\"words\", words);\n    this.setState({ words });\n  };\n\n  getWords = () => {\n    const text = this.getText();\n    const lines = text.split(/[,\\. ]+/g);\n\n    const wordsMap = {};\n    lines.forEach((word) => {\n      word = word.toLowerCase().trim();\n      if (!wordsMap[word]) wordsMap[word] = 0;\n      wordsMap[word] += 1;\n    });\n\n    const words = [];\n    Object.keys(wordsMap).map((word) => {\n      if (word && word.length > 2 && wordsMap[word] && !stopWords[word]) {\n        words.push({ text: word, value: wordsMap[word] });\n      }\n    });\n    return words;\n  };\n\n  getText = () => {\n    const { boards, settings, itemIds } = this.state;\n    const result = boards.map((board) => {\n      return board.items\n        .filter((item) => !itemIds || itemIds[item.id])\n        .map((item) => {\n          let columnIds, values;\n          if (settings.column) columnIds = Object.keys(settings.column);\n\n          if (columnIds && columnIds.length > 0) {\n            const columnValues = item.column_values.filter((cv) => {\n              return columnIds.includes(cv.id);\n            });\n            values = columnValues\n              .map((cv) => cv.text)\n              .filter((t) => t && t.length > 0)\n              .join(\" \");\n\n            if (columnIds.includes(\"name\")) values += item.name;\n            return values;\n          } else {\n            return item.name;\n          }\n        });\n    });\n    return _.flatten(result).join(\" \");\n  };\n\n  maxWords = () => {\n    const { settings } = this.state;\n    return settings.maxWords ? parseInt(settings.maxWords) : 100;\n  };\n\n  padding = () => {\n    const { settings } = this.state;\n    return settings.padding ? parseInt(settings.padding) : 10;\n  };\n\n  render() {\n    const { settings, context, words } = this.state;\n    return (\n      <div className=\"monday-app\">\n        <ReactWordcloud\n          words={words}\n          maxWords={this.maxWords()}\n          options={{\n            fontFamily: \"Roboto\",\n            fontSizes: [18, 36],\n            fontWeight: 700,\n            deterministic: true,\n            colors: colors,\n            padding: this.padding()\n            // spiral: \"archimedean\"\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst colors = [\n  \"#fdab3d\",\n  \"#00c875\",\n  \"#e2445c\",\n  \"#0086c0\",\n  \"#579bfc\",\n  \"#a25ddc\",\n  \"#037f4c\",\n  \"#CAB641\",\n  \"#FFCB00\",\n  \"#BB3354\",\n  \"#FF158A\",\n  \"#FF5AC4\",\n  \"#784BD1\",\n  \"#9CD326\",\n  \"#66CCFF\",\n  \"#7F5347\",\n  \"#FF642E\"\n];\n"]},"metadata":{},"sourceType":"module"}